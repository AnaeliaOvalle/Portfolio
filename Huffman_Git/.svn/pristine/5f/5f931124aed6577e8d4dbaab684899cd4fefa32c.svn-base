class Tree extends GenNode implements Comparable<Tree>
{
    GenNode root;

    //create tree with childless node AKA leaf
    public Tree(){
    	
    }
    public Tree(int index, int frequency)
    {
        root = new GenNode(index, frequency);
    }

    //subtree with null as root
    public Tree(Tree tree1, Tree tree2)
    {
        root = new GenNode();
        root.left = tree1.root;
        root.right = tree2.root;
        root.frequency = tree1.root.frequency + tree2.root.frequency;
    }
    
//    public void setRightChild(Tree rightChild) {
//		this.right = rightChild;
//	}
//
//    public void setLeftChild(Tree leftChild) {
// 		this.left = leftChild;
// 	}

    @Override
    public int compareTo(Tree t)
    {
        return root.frequency - t.root.frequency;
    }
    
//    /**
//     * Encode Huffman Tree to BitStream
//     * if leaf node pushes 1 + literal byte
//     * otherwise 0
//     * @return bs BitStream with encoded tree
//     */
//    public BinaryFile encodedTree()
//    {
//        BinaryFile bf = new BinaryFile();
//        encodedTree(root, bs);
//        bs.close();
//        System.out.println(bs);
//        return bs;
//    }
//
//    /**
//     * recursive helper method
//     */
//    public void encodedTree(GenNode node, BinaryFile bs)
//    {
//        if (isLeaf(node))
//        {
//            bs.writeBit(true);
//        }
//        else
//        {
//            bs.writeBit(false);
//            encodedTree(node.left, bs);
//            encodedTree(node.right, bs);
//        }
//    } 
    
//    public int getCode()
//    {
//        Node current = root;
//        boolean bit;
//        while (!isLeaf(current))
//        {
//           bit = bs.readBit();
//           if (bit) current = current.right;
//           else current = current.left;
//           
//        }
//        return current.index;
//    }
    

//
//    /**
//     * Get individual huffman code from current spot in tree
//     * recurses until leaf node found
//     */
//    public int getCode(BitStream bs)
//    {
//        Node current = root;
//        boolean bit;
//        while (!isLeaf(current))
//        {
//           bit = bs.readBit();
//           if (bit) current = current.right;
//           else current = current.left;
//
//        }
//        return current.index;
//    }
//
//    /**
//     * is node a leaf node (childless)
//     * @param n Node to test
//     * @return true if node has no children
//     */

}